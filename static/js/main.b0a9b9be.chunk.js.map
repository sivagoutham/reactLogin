{"version":3,"sources":["components/redux/history.js","components/Login/login.js","components/redux/actions/action.js","components/redux/actiontypes/actiontypes.js","components/Dashboard/dashboard.js","App.js","serviceWorker.js","components/redux/reducers/employeeReducer.js","components/redux/reducers/loginReducer.js","components/redux/reducers/index.js","index.js"],"names":["history","createBrowserHistory","Login","props","state","username","password","submitted","message","handleChange","bind","handleSubmit","e","preventDefault","target","name","value","this","setState","login","loginData","console","log","className","onSubmit","htmlFor","type","onChange","Component","connect","dispatch","axios","get","then","response","data","forEach","element","payload","push","Dashboard","handleClick","window","back","emp","getEmployees","users","employee","Fragment","map","user","key","id","age","gender","email","phoneNo","onClick","App","exact","path","component","Boolean","location","hostname","match","employeeReducer","action","loginReducer","rootReducer","combineReducers","createStoreWithMiddleware","applyMiddleware","ReduxThunk","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.b0a9b9be.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../redux/actions/action\";\r\nimport \"./login.css\";\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      submitted: false,\r\n      message:false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value,message:false });\r\n  }\r\n\r\n async handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({ submitted: true });\r\n    const { username, password } = this.state;\r\n    if (username && password) {\r\n       await this.props.login(username, password);\r\n       if(this.props.loginData === 'success'){\r\n      //   let url = 'https://sivagoutham.github.io/reactLogin/#/dashboard';\r\n      //  window.location.href =url;\r\n\r\n      }else{\r\n        \r\n       this.setState({message:true})\r\n        console.log(this.props.loginData)\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { username, password, submitted,message } = this.state;\r\n    return (\r\n      <div className=\"center\">\r\n        <h2>Login</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n            />\r\n            {submitted && !username && (\r\n              <div className=\"help-block\">Username is required</div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n            {submitted && !password && (\r\n              <div className=\"help-block\">Password is required</div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <button className='btn btn-primary'>Login</button>\r\n          </div>\r\n          <div>\r\n          {submitted && message && (\r\n              <div className=\"error-block\">Please enter valid details</div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { loginData: state.loginData };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import {GET_EMPLOYEES,GET_LOGIN} from '../actiontypes/actiontypes';\r\nimport axios from 'axios';\r\nimport {history} from '../history'\r\n \r\n\r\nexport const getEmployees = ()=>{\r\n    return dispatch =>{\r\n        //'https://sivagoutham.github.io/reactLogin/dashboard.json'\r\n        //http://localhost:3000/user\r\n\r\n        return axios.get('https://sivagoutham.github.io/reactLogin/dashboard.json').then((response)=>{\r\n            console.log(response);\r\n            dispatch({type:GET_EMPLOYEES,payload:response.data.user})\r\n        })\r\n    }\r\n}\r\n\r\nexport const login= (username,password)=>{\r\n    return dispatch=>{\r\n        return axios.get('https://sivagoutham.github.io/reactLogin/login.json').then((response)=>{\r\n            console.log(response)\r\n            response.data.login.forEach(element => {\r\n                console.log(element)\r\n                if(element.username === username && element.password === password){\r\n                    console.log('test')\r\n                    \r\n                    dispatch({type:GET_LOGIN,payload:\"success\"})\r\n                    history.push('#/dashboard')\r\n                }else{\r\n                    dispatch({type:GET_LOGIN,payload:'failure'})\r\n                }\r\n                \r\n            });\r\n            \r\n\r\n        })\r\n    }\r\n}\r\nexport const logout=(username,password)=>{\r\n    return dispatch=>{\r\n        return axios.get('http://localhost:3000').then((response)=>{\r\n            console.log(response)\r\n        })\r\n    }\r\n}","export const GET_EMPLOYEES = 'GET_EMPLOYEES';\r\nexport const GET_LOGIN = 'GET_LOGIN'","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getEmployees } from \"../redux/actions/action\";\r\nimport './dashboard.css';\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      emp: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getEmployees();\r\n  }\r\n  handleClick =()=>{\r\n    window.history.back();\r\n  }\r\n\r\n  render() {\r\n    \r\n    const users = this.props.employee;\r\n    console.log(users);\r\n    return (\r\n      <React.Fragment>\r\n        \r\n      \r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Age</th>\r\n            <th>Gender</th>\r\n            <th>Email Id</th>\r\n            <th>Phone Number</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user) => (\r\n            <tr key={user.id}>\r\n              <td>{user.name}</td>\r\n              <td>{user.age}</td>\r\n              <td>{user.gender}</td>\r\n              <td>{user.email}</td>\r\n              <td>{user.phoneNo}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n          <div className='btnPadding'>\r\n            <button className='btn btn-primary' onClick={this.handleClick}>Logout</button>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { employee: state.employee };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getEmployees })(Dashboard);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Login from './components/Login/login';\r\nimport Dashboard from './components/Dashboard/dashboard'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='container'>\r\n        <Router >\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Login} />\r\n            <Route path='/dashboard' component ={Dashboard}/>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const employeeReducer = (state=[],action)=>{\r\n\r\n    switch(action.type){\r\n        case 'GET_EMPLOYEES':\r\n            return action.payload;\r\n            case 'GET_LOGIN':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default employeeReducer;","const loginReducer = (state=[],action)=>{\r\n\r\n    switch(action.type){\r\n            case 'GET_LOGIN':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loginReducer;","import {combineReducers} from 'redux';\r\n\r\nimport employeeReducer from './employeeReducer';\r\nimport loginReducer from './loginReducer'\r\n\r\nconst rootReducer =combineReducers({\r\n    employee: employeeReducer,\r\n    loginData:loginReducer\r\n\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\n import ReduxThunk from 'redux-thunk';\r\n import { createStore, applyMiddleware } from 'redux';\r\n import rootReducer from './components/redux/reducers/index';\r\n\r\n const createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\r\n\r\nReactDOM.render(\r\n  <Provider store={createStoreWithMiddleware(rootReducer)}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}