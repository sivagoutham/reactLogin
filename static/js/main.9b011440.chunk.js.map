{"version":3,"sources":["components/Login/login.js","components/redux/history.js","components/redux/actions/action.js","components/redux/actiontypes/actiontypes.js","components/Dashboard/dashboard.js","App.js","serviceWorker.js","components/redux/reducers/employeeReducer.js","components/redux/reducers/loginReducer.js","components/redux/reducers/index.js","index.js"],"names":["Login","createBrowserHistory","props","state","username","password","submitted","message","handleChange","bind","handleSubmit","e","preventDefault","target","name","value","this","setState","login","loginData","console","log","window","location","href","className","onSubmit","htmlFor","type","onChange","Component","connect","dispatch","axios","get","then","response","data","forEach","element","payload","Dashboard","handleClick","emp","getEmployees","users","employee","Fragment","map","user","key","id","age","gender","email","phoneNo","onClick","App","exact","path","component","Boolean","hostname","match","employeeReducer","action","loginReducer","rootReducer","combineReducers","createStoreWithMiddleware","applyMiddleware","ReduxThunk","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.9b011440.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../redux/actions/action\";\r\nimport \"./login.css\";\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      submitted: false,\r\n      message:false\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value,message:false });\r\n  }\r\n\r\n async handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({ submitted: true });\r\n    const { username, password } = this.state;\r\n    if (username && password) {\r\n       await this.props.login(username, password);\r\n       if(this.props.loginData === 'success'){\r\n       console.log(this.props.loginData)\r\n       console.log(window.location.href)\r\n      //  let URL = window.location.href+'dashboard'\r\n      //  console.log(URL);\r\n       window.location.href = '/dashboard'\r\n\r\n      }else{\r\n        \r\n       this.setState({message:true})\r\n        console.log(this.props.loginData)\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { username, password, submitted,message } = this.state;\r\n    return (\r\n      <div className=\"center\">\r\n        <h2>Login</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"username\">Username</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n            />\r\n            {submitted && !username && (\r\n              <div className=\"help-block\">Username is required</div>\r\n            )}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n            {submitted && !password && (\r\n              <div className=\"help-block\">Password is required</div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            <button className='btn btn-primary'>Login</button>\r\n          </div>\r\n          <div>\r\n          {submitted && message && (\r\n              <div className=\"error-block\">Please enter valid details</div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { loginData: state.loginData };\r\n};\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","import {GET_EMPLOYEES,GET_LOGIN} from '../actiontypes/actiontypes';\r\nimport axios from 'axios';\r\nimport {history} from '../history'\r\n \r\n\r\nexport const getEmployees = ()=>{\r\n    return dispatch =>{\r\n        //'https://sivagoutham.github.io/reactLogin/dashboard.json'\r\n        //http://localhost:3000/user\r\n\r\n        return axios.get('https://sivagoutham.github.io/reactLogin/dashboard.json').then((response)=>{\r\n            console.log(response);\r\n            dispatch({type:GET_EMPLOYEES,payload:response.data.user})\r\n        })\r\n    }\r\n}\r\n\r\nexport const login= (username,password)=>{\r\n    return dispatch=>{\r\n        return axios.get('https://sivagoutham.github.io/reactLogin/login.json').then((response)=>{\r\n            console.log(response)\r\n            response.data.login.forEach(element => {\r\n                console.log(element)\r\n                if(element.username === username && element.password === password){\r\n                    console.log('test')\r\n                    dispatch({type:GET_LOGIN,payload:\"success\"})\r\n                }else{\r\n                    dispatch({type:GET_LOGIN,payload:'failure'})\r\n                }\r\n                \r\n            });\r\n            \r\n\r\n        })\r\n    }\r\n}\r\nexport const logout=(username,password)=>{\r\n    return dispatch=>{\r\n        return axios.get('http://localhost:3000').then((response)=>{\r\n            console.log(response)\r\n        })\r\n    }\r\n}","export const GET_EMPLOYEES = 'GET_EMPLOYEES';\r\nexport const GET_LOGIN = 'GET_LOGIN'","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getEmployees } from \"../redux/actions/action\";\r\nimport './dashboard.css';\r\n\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      emp: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getEmployees();\r\n  }\r\n  handleClick =()=>{\r\n    window.location.href = '/'\r\n  }\r\n\r\n  render() {\r\n    const users = this.props.employee;\r\n    console.log(users);\r\n    return (\r\n      <React.Fragment>\r\n        \r\n      \r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Age</th>\r\n            <th>Gender</th>\r\n            <th>Email Id</th>\r\n            <th>Phone Number</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user) => (\r\n            <tr key={user.id}>\r\n              <td>{user.name}</td>\r\n              <td>{user.age}</td>\r\n              <td>{user.gender}</td>\r\n              <td>{user.email}</td>\r\n              <td>{user.phoneNo}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n          <div className='btnPadding'>\r\n            <button className='btn btn-primary' onClick={this.handleClick}>Logout</button>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { employee: state.employee };\r\n};\r\n\r\nexport default connect(mapStateToProps, { getEmployees })(Dashboard);\r\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Login from './components/Login/login';\nimport Dashboard from './components/Dashboard/dashboard'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='container'>\n        <Router >\n          <switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route path='/dashboard' component ={Dashboard}/>\n          </switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const employeeReducer = (state=[],action)=>{\r\n\r\n    switch(action.type){\r\n        case 'GET_EMPLOYEES':\r\n            return action.payload;\r\n            case 'GET_LOGIN':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default employeeReducer;","const loginReducer = (state=[],action)=>{\r\n\r\n    switch(action.type){\r\n            case 'GET_LOGIN':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loginReducer;","import {combineReducers} from 'redux';\r\n\r\nimport employeeReducer from './employeeReducer';\r\nimport loginReducer from './loginReducer'\r\n\r\nconst rootReducer =combineReducers({\r\n    employee: employeeReducer,\r\n    loginData:loginReducer\r\n\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n import ReduxThunk from 'redux-thunk';\n import { createStore, applyMiddleware } from 'redux';\n import rootReducer from './components/redux/reducers/index';\n\n const createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(rootReducer)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}