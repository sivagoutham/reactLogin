{"version":3,"sources":["components/Login/login.js","components/Dashboard/dashboard.js","components/redux/actions/action.js","components/redux/actiontypes/actiontypes.js","App.js","serviceWorker.js","components/redux/reducers/employeeReducer.js","components/redux/reducers/index.js","index.js"],"names":["Login","data","username","Component","Dashboard","props","state","emp","this","getEmployees","employees","employee","console","log","connect","dispatch","axios","get","then","response","type","payload","App","className","Boolean","window","location","hostname","match","employeeReducer","action","rootReducer","combineReducers","createStoreWithMiddleware","applyMiddleware","ReduxThunk","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"+WAUeA,E,uKAJP,OAAO,4BAAKC,EAAKC,c,GAHLC,a,wBCCdC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRC,IAAI,IAHM,E,gEAQdC,KAAKH,MAAMI,iB,+BAIX,IAAMC,EAAYF,KAAKH,MAAMM,SAE7B,OADAC,QAAQC,IAAIH,GAER,yC,GAhBYP,aA0BTW,eAJS,SAACR,GACxB,MAAQ,CAACK,SAAWL,EAAMK,YAGa,CAACF,aC1Bb,WACxB,OAAO,SAAAM,GACH,OAAOC,IAAMC,IAAI,+EAA+EC,MAAK,SAACC,GAClGP,QAAQC,IAAIM,GACZJ,EAAS,CAACK,KCRO,gBDQYC,QAAQF,EAASlB,aDsB3Ca,CAAyCV,GGjBzCkB,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCRSC,EAVS,WAAoB,IAAnBvB,EAAkB,uDAAZ,GAAGwB,EAAS,uCAEvC,OAAOA,EAAOV,MACV,IAAK,gBACD,OAAOU,EAAOT,QAClB,QACI,OAAOf,ICEJyB,EAJIC,YAAgB,CAC/BrB,SAAUkB,ICKPI,EAA4BC,YAAgBC,IAAhBD,CAA4BE,KAE/DC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAON,EAA0BF,IACzC,kBAAC,EAAD,OAEFS,SAASC,eAAe,W","file":"static/js/main.1a3998c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport data from \"../../JSON/login.json\";\r\n\r\nclass Login extends Component{\r\n\r\n    render(){\r\n        return(<h1>{data.username}</h1>)\r\n    }\r\n}\r\n\r\nexport default Login","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getEmployees} from '../redux/actions/action';\r\n\r\nclass Dashboard extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            emp:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getEmployees();\r\n    }\r\n\r\n    render(){\r\n        const employees = this.props.employee;\r\n        console.log(employees)\r\n        return(\r\n            <h1>heelo</h1>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\nconst mapStateToProps = (state)=>{\r\n return  {employee : state.employee}       \r\n}\r\n\r\nexport default connect(mapStateToProps, {getEmployees})(Dashboard)","import {GET_EMPLOYEES} from '../actiontypes/actiontypes';\r\nimport axios from 'axios';\r\n \r\n\r\nexport const getEmployees = ()=>{\r\n    return dispatch =>{\r\n        return axios.get('https://github.com/sivagoutham/reactLogin/blob/master/public/dashboard.json').then((response)=>{\r\n            console.log(response);\r\n            dispatch({type:GET_EMPLOYEES,payload:response.data})\r\n        })\r\n    }\r\n}","export const GET_EMPLOYEES = 'GET_EMPLOYEES'","import React from 'react';\nimport './App.css';\nimport Login from './components/Login/login';\nimport Dashboard from './components/Dashboard/dashboard'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login></Login>\n      <Dashboard></Dashboard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const employeeReducer = (state=[],action)=>{\r\n\r\n    switch(action.type){\r\n        case 'GET_EMPLOYEES':\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default employeeReducer;","import {combineReducers} from 'redux';\r\n\r\nimport employeeReducer from './employeeReducer';\r\n\r\nconst rootReducer =combineReducers({\r\n    employee: employeeReducer\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n import ReduxThunk from 'redux-thunk';\n import { createStore, applyMiddleware } from 'redux';\n import rootReducer from './components/redux/reducers/index';\n\n const createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(rootReducer)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}